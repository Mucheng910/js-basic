#include <stdio.h>
#include <malloc.h>
#define MAXSIZE 30
#define INFINITY 0 
typedef struct {
	int arcs[MAXSIZE][MAXSIZE];//存放的是边的信息 
	int vex[MAXSIZE];//存放的是顶点信息 
	int vexnum;//顶点数目 
	int arcnum;//边的数目 
}AdjMatrix;
typedef struct {
	int data[MAXSIZE];
	int rear;
	int front;
}Queue; 
int visited[MAXSIZE] = {0};
int visit[MAXSIZE] = {0};
void Create(AdjMatrix *chart);
void Print(AdjMatrix chart);
void PrintIn(AdjMatrix chart);
void DFS_search(AdjMatrix chart);
void DFS(AdjMatrix chart,int v0);
int FirstAdjVex(AdjMatrix chart,int m);
int NextAdjVex(AdjMatrix chart,int m,int w);
int index(AdjMatrix chart,int m);
void BFS_search(AdjMatrix chart);
void BFS(AdjMatrix chart,int m);
void InitQueue(	Queue *Q);
void EnterQueue(Queue *Q , int m);
int Empty(Queue Q);
void DeletQueue(Queue *Q,int *v);
int FirstAdj(AdjMatrix chart,int v);
int NextAdj(AdjMatrix chart,int v,int w);

int main(){
	AdjMatrix chart; 
	Create(&chart);//建立邻接矩阵
	Print(chart);//输出储存结果 
	PrintIn(chart);//计算结点的入度和出度
	printf("深度优先遍历结果：\n");
	DFS_search(chart);//用深度优先搜索遍历
	printf("\n广度优先遍历结果：\n");
	BFS_search(chart);//用广度优先搜索遍历 
	return 0;
}
void Create(AdjMatrix *chart){
	int i,j,k,vex1,vex2;
    printf("请输入无向网中的顶点数和边数：");
	scanf("%d%d",&chart->vexnum,&chart->arcnum);
	for (i=0;i<=chart->vexnum;i++)
		for (j=0;j<chart->vexnum;j++)
			chart->arcs[i][j] = INFINITY;
	printf("请输入无向网中的%d个顶点:",chart->vexnum);
	for(i=0;i<chart->vexnum;i++){
	    printf("%NO.%d个顶点：\n",i+1);
	    scanf ("%d",&chart->vex[i]);
	}
	printf("请输入无向网中%d条边：\n",chart->arcnum);
	for (k=0;k<chart->arcnum;k++){
		printf("\nNO.%d条边的下标：",k+1);
		scanf ("%d%d",&vex1,&vex2);
		chart->arcs[vex1][vex2] = 1; 
		//chart->arcs[vex2][vex1] = 1;//有向网 
	}
}	
void Print(AdjMatrix chart){
	int i,j,num = 0;
	for (i = 0;i < chart.vexnum;i++)
	   for (j = 0;j < chart.vexnum;j++){
	      num++;
	      printf("%d",chart.arcs[i][j]);
	      if(num%chart.vexnum == 0)
	          printf("\n"); 
       }
}
void PrintIn(AdjMatrix chart){
	int i,j;
	int numIn;
	int numOut;
	for (i=0;i<chart.vexnum;i++){
		numIn = 0;
		numOut = 0;
		for (j=0;j<chart.vexnum;j++){
			if (chart.arcs[j][i] == 1)
			   numIn++;
			if (chart.arcs[i][j] == 1)
			   numOut++;
	    }
	    printf("\n顶点%d的入度为：%d,出度为：%d\n",chart.vex[i],numIn,numOut);
    }
}
void DFS_search(AdjMatrix chart){  
    int i;
    for(i=0;i<chart.vexnum;i++){
    	if(visited[i]==0)  
            DFS(chart,chart.vex[i]); 
	}
}  
void DFS(AdjMatrix chart,int v0){
    int i,j,w,logo1,logo2;
	printf("%d ",v0);
	logo1 = index(chart,v0);
	visited[logo1] = 1;
	w = FirstAdjVex(chart,v0);//第一个邻接点 
	while(w!=-1){
		logo2 = index(chart,w);
	   	if (visited[logo2]==0) //当该结点未被访问过，进行DFS 
	   	   DFS(chart,w);
	   	w = NextAdjVex(chart,v0,w);//下一个邻接点 
	}
}
int FirstAdjVex(AdjMatrix chart,int m){
	int i,p = -1;
	int j = index(chart,m);
	for (i = 0 ;i < chart.vexnum;i++){
		if(chart.arcs[j][i]!=0&&visited[i]!=1){
		  p = chart.vex[i];
		  break;
		}	   
	}
	return p;
}
int NextAdjVex(AdjMatrix chart,int m,int w){
	int i,p = -1;
	int logo1 = index(chart,m);
	int logo2 = index(chart,w);
	for(i = 0;i<chart.vexnum;i++){
		if (chart.arcs[logo1][i] == 1&&visited[i]!=1){ 
		  p = chart.vex[i];
		  break;
	}} 
		return p;
}
int index(AdjMatrix chart,int m){
	int i;
	for(i =0 ;i<chart.vexnum;i++)
	    if (chart.vex[i] == m){
		   return i;
	   }
}

//BFS
void BFS_search(AdjMatrix chart){
	int i;
	for (i = 0;i<chart.vexnum;i++){
		if(visit[i] == 0){
			BFS(chart,i);
		}
	}
}
void BFS(AdjMatrix chart,int m){
	printf("%d ",chart.vex[m]);
	visit[m] = 1;
	int w;
	int v; 
	Queue Q;
	InitQueue(&Q);
	EnterQueue(&Q,m);
	while(!Empty(Q)){
		DeletQueue(&Q,&v);//将第一个元素出队 
//		printf(" v = %d",v);
		w = FirstAdj(chart,v);//找到其第一个孩子 
//		printf(" ##w = %d ##",w);
		while(w!=-1){ //孩子存在 
			if (!visit[w]){ //孩子没有被访问过 
				printf("%d ",chart.vex[w]); 
				visit[w] = 1; //修改标志域 
				EnterQueue(&Q,w);  //将其孩子入队 
//				printf(" w = %d\n",w);
			}
			w = NextAdj(chart,v,w); //访问下一个邻接点 
//			printf("\thhh\n");
		}
//		printf("\thhhhhhh\n");
	}
}
void InitQueue(Queue *Q){
	Q = (Queue *)malloc(sizeof(Queue ));
	Q->front = Q->rear = MAXSIZE - 1; 
}
void EnterQueue(Queue *Q , int m) {//将m入队 
//    if ((Q->rear +1)%MAXSIZE == Q->front)
//	    printf("队满!");
//	else
{	  
    	Q->rear = (Q->rear+1) % MAXSIZE;
		Q->data[Q->rear] = m; 
	}
}
int Empty(Queue Q){
	if(Q.front == Q.rear)
	    return 1;
	else
	    return 0; 
} 
void DeletQueue(Queue *Q,int *v){//出队 
	if (Q->front == Q->rear)
	  printf("队空");
	else{
	  *v = Q->data[Q->front];  	
	  Q->front = (Q->front+1) % MAXSIZE;
	}
}
int FirstAdj(AdjMatrix chart,int v){
	int i;
	for (i = 0;i<chart.vexnum;i++){
		if ((chart.arcs[v][i] !=0)&&(visit[i]==0))
		    return i; 
	}
	return -1;
}
int NextAdj(AdjMatrix chart,int v,int w){
	int i,logo = -1;
	for (i = 0;i<chart.vexnum;i++){
	if ((chart.arcs[v][i] !=0)&&(visit[i]==0))
	 {
	   logo = i;
		break;
	}
	}
	return logo;
}
